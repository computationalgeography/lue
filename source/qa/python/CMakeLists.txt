add_subdirectory(qa)
add_test_conditionally(test)

if(LUE_QA_WITH_PYTHON_API)

    # A pybind11 SHARED library is a CMake runtime output artifact. Target properties to set/get are
    # RUNTIME_OUTPUT_DIRECTORY and RUNTIME_OUTPUT_NAME.
    add_library(lue_py_qa SHARED
        src/python_extension.cpp
        src/submodule.cpp
    )

    add_library(lue::py_qa ALIAS lue_py_qa)

    set_target_properties(lue_py_qa
        PROPERTIES
            VERSION ${LUE_VERSION}
            SOVERSION ${LUE_VERSION_MAJOR}
    )
    target_include_directories(lue_py_qa
        PUBLIC
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    )

    target_link_libraries(lue_py_qa
        PRIVATE
            lue::qa
            lue::shared
            pybind11::module
            pybind11::thin_lto
            pybind11::opt_size
            pybind11::windows_extras
    )

    # TODO pybind11_strip does not work on macOS, when building using Conda packages
    #      The resulting binary can't be imported. Results in "killed: 9".
    if(NOT MSVC AND NOT APPLE AND NOT ${CMAKE_BUILD_TYPE} MATCHES Debug|RelWithDebInfo)
        pybind11_strip(lue_py_qa)
    endif()

    lue_install_runtime_libraries(
        TARGETS lue_py_qa
    )

    if(LUE_PYTHON_FROM_CONDA AND NOT DEFINED ENV{CONDA_BUILD})
        # If we are using a Python interpreter from a Conda environment then we must expand RPATH
        # to include the location of the Python libraries. But if we are building a Conda package,
        # we assume Conda takes care of RPATH handling.
        set_property(
            TARGET lue_py_qa
            APPEND
            PROPERTY INSTALL_RPATH
                ${Python_LIBRARY_DIRS}
        )
    endif()

    install(
        DIRECTORY ${CMAKE_BINARY_DIR}/${LUE_BUILD_PYTHON_PACKAGE_DIR}/$<$<BOOL:${LUE_GENERATOR_IS_MULTI_CONFIG}>:$<CONFIG>>/qa
        DESTINATION ${LUE_INSTALL_PYTHON_PACKAGE_DIR}
        COMPONENT lue_runtime
    )
endif()
