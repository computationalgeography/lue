namespace lue {

/*!
    @brief      Namespace containing C++ wrappers around the [Vulkan C-API](https://registry.khronos.org/vulkan/specs/1.3-extensions/html/)

    Vulkan API:
    - Functions have a lower case `vk` prefix, types like enumerations and structs have a `Vk`
      prefix and enumeration values have a `VK_` prefix.
    - Almost all functions return a `VkResult` that is either `VK_SUCCESS` or an error code.

    lue::vulkan classes that wrap a Vulkan type T:
    - If T actually is a pointer, provide an automatic conversion from our type to T. In general,
      we are responsible for cleaning up the pointer, by calling some Vulkan cleanup
      function. Copies of T must not outlive our instance.
    - If T is not a pointer, provide an automatic conversion to a pointer to T. This is useful for
      passing information into Vulkan API function. We assume that it is safe to let our instance go
      out of scope. We assume that the pointer passed into API functions is not stored, but only
      used to immediately use the information pointed to.

    Conversion functions of classes, returning an instance of a layered Vulkan type are
    non-constant, even though a copy may be made of the Vulkan variable. This is because the
    Vulkan type is often a pointer to Vulkan data. See for example `Device` and `VkDevice`. The
    automatic conversion is non-const. The layered `VkDevice` instance is actually a non-const
    pointer.

    - The Vulkan API exposes one or more device—ï.
    - A device exposes one or more queues.
    - Queues are partitioned into families of queues sharing characteristics.
    - Work produced for a queue family can be executed on any queue within that family.
    - Queue may execute work asynchronously to one another.
    - Queues provide an interface to the execution engines of a device. Commands for these
      devices are recorded into command buffers ahead of execution time, and the submitted to a
      queue for execution.
    - Explicit ordering constraints between different queues or with the host can be expressed
      with semaphores and fences.

    Object model:
    - Dispatchable handle type: pointer to an opaque type.
    - Non-dispatchable handle type: 64-bit integer type whose meaning is implementation dependent.

    Misc:
    - Once Vulkan is initialized, devices and queues are the primary objects used to interact
      with a Vulkan implementation.
    - Creating a logical device also creates the queues associated with that device.
    - Vulkan supports two primary resource types: buffers and images.




*/
namespace vulkan {
}

}
