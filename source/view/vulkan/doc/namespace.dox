namespace lue {

/*!
    @brief      Namespace containing C++ wrappers around the [Vulkan C-API](https://registry.khronos.org/vulkan/specs/1.3-extensions/html/)

    Vulkan API:
    - Functions have a lower case `vk` prefix, types like enumerations and structs have a `Vk`
      prefix and enumeration values have a `VK_` prefix.
    - Almost all functions return a `VkResult` that is either `VK_SUCCESS` or an error code.

    Objects that wrap a Vulkan type T:
    - If T actually is a pointer, provide an automatic conversion from our type to T. In general,
      we are responsible for cleaning up the pointer, by calling some Vulkan cleanup function. Copies
      of T must not outlive our instance.
    - If T is not a pointer, provide an automatic conversion to a pointer to T. This is useful for
      passing information into Vulkan API function. We assume that it is safe to let our instance go
      out of scope. We assume that the pointer passed into API functions is not stored, but only
      used to immediately use the information pointed to.

    Conversion functions of classes, returning an instance of a layered Vulkan type are
    non-constant, even though a copy may be made of the Vulkan variable. This is because the
    Vulkan type is often a pointer to Vulkan data. See for example `Device` and `VkDevice`. The
    automatic conversion is non-const. The layered `VkDevice` instance is actually a non-const
    pointer.
*/
namespace vulkan {
}

}
