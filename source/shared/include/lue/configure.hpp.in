#pragma once
#include <string_view>


#cmakedefine LUE_VERSION "${LUE_VERSION}"
// #cmakedefine LUE_VERSION_TWEAK "${LUE_VERSION_TWEAK}"

#cmakedefine LUE_BUILD_DATA_MODEL
#cmakedefine LUE_DATA_MODEL_WITH_PYTHON_API

#cmakedefine LUE_BUILD_FRAMEWORK
#cmakedefine LUE_FRAMEWORK_WITH_OPENCL
#cmakedefine LUE_FRAMEWORK_WITH_PYTHON_API

#cmakedefine01 LUE_VALIDATE_IDXS
#cmakedefine01 LUE_ASSERT_CONDITIONS
#cmakedefine LUE_BUILD_QA
#cmakedefine LUE_QA_WITH_PYTHON_API
#cmakedefine LUE_QA_WITH_TESTS


namespace lue {

    class BuildOptions
    {

        public:

            // C++20
            // static constexpr std::string version{LUE_VERSION};

            // NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays, hicpp-avoid-c-arrays,
            // modernize-avoid-c-arrays)
            static constexpr char const* version{LUE_VERSION};

            // static constexpr char const* version_tweak{LUE_VERSION_TWEAK};

            static constexpr bool build_framework{
#ifdef LUE_BUILD_FRAMEWORK
                true
#else
                false
#endif
            };

            static constexpr bool validate_idxs{LUE_VALIDATE_IDXS};

            static constexpr bool assert_conditions{LUE_ASSERT_CONDITIONS};

            static constexpr bool build_qa{
#ifdef LUE_BUILD_QA
                true
#else
                false
#endif
            };

            static constexpr bool qa_with_tests{
#ifdef LUE_QA_WITH_TESTS
                true
#else
                false
#endif
            };
    };


    // inline constexpr BuildOptions build_options;

}  // namespace lue
