#include "flow_accumulation.hpp"
#include "lue/framework/test/array.hpp"


namespace lue::test {

    {% raw %}
    FlowDirectionArray merging_streams()
    {
        return create_partitioned_array<FlowDirectionArray>(
            array_shape,
            partition_shape,
            {
                {
                    // 0, 0
                    nd,
                    nd,
                    nd,
                    nd,
                    nd,
                    nd,
                    nd,
                    nd,
                    se,
                },
                {
                    // 0, 1
                    nd,
                    nw,
                    se,
                    nd,
                    s,
                    e,
                    nd,
                    s,
                    nd,
                },
                {
                    // 0, 2
                    nd,
                    s,
                    sw,
                    se,
                    s,
                    w,
                    nd,
                    s,
                    sw,
                },
                {
                    // 1, 0
                    nd,
                    nd,
                    e,
                    nd,
                    nd,
                    ne,
                    nd,
                    nd,
                    e,
                },
                {
                    // 1, 1
                    e,
                    s,
                    w,
                    nd,
                    s,
                    w,
                    e,
                    s,
                    w,
                },
                {
                    // 1, 2
                    w,
                    w,
                    nd,
                    w,
                    nd,
                    nd,
                    w,
                    nd,
                    nd,
                },
                {
                    // 2, 0
                    nd,
                    nd,
                    nd,
                    nd,
                    nd,
                    nd,
                    nd,
                    nd,
                    s,
                },
                {
                    // 2, 1
                    nd,
                    s,
                    nd,
                    sw,
                    w,
                    w,
                    w,
                    w,
                    w,
                },
                {
                    // 2, 2
                    nw,
                    nd,
                    nd,
                    w,
                    nd,
                    nd,
                    w,
                    nd,
                    nd,
                },
            });
    }


    auto pcraster_example_flow_direction() -> FlowDirectionArray
    {
        using Shape = ShapeT<FlowDirectionArray>;

        Shape const array_shape{{5, 5}};
        Shape const partition_shape{{5, 5}};

        return create_partitioned_array<FlowDirectionArray>(
            array_shape,
            partition_shape,
            // clang-format off
            {{
                 s,  s,  s, sw, sw,
                 s,  s, sw, sw, sw,
                se,  s, sw,  w, sw,
                se,  s, sw,  w,  w,
                 e,  p,  w,  w,  w,
            }}  // clang-format on
        );
    }


    auto all_no_data() -> FlowDirectionArray
    {
        return create_partitioned_array<FlowDirectionArray>(
            array_shape,
            partition_shape,
            // clang-format off
            {
                {
                    // 0, 0
                    nd, nd, nd,
                    nd, nd, nd,
                    nd, nd, nd,
                },
                {
                    // 0, 1
                    nd, nd, nd,
                    nd, nd, nd,
                    nd, nd, nd,
                },
                {
                    // 0, 2
                    nd, nd, nd,
                    nd, nd, nd,
                    nd, nd, nd,
                },
                {
                    // 1, 0
                    nd, nd, nd,
                    nd, nd, nd,
                    nd, nd, nd,
                },
                {
                    // 1, 1
                    nd, nd, nd,
                    nd, nd, nd,
                    nd, nd, nd,
                },
                {
                    // 1, 2
                    nd, nd, nd,
                    nd, nd, nd,
                    nd, nd, nd,
                },
                {
                    // 2, 0
                    nd, nd, nd,
                    nd, nd, nd,
                    nd, nd, nd,
                },
                {
                    // 2, 1
                    nd, nd, nd,
                    nd, nd, nd,
                    nd, nd, nd,
                },
                {
                    // 2, 2
                    nd, nd, nd,
                    nd, nd, nd,
                    nd, nd, nd,
                },
            }  // clang-format on
        );
    }


    auto spiral_in() -> FlowDirectionArray
    {
        return create_partitioned_array<FlowDirectionArray>(
            array_shape,
            partition_shape,
            // clang-format off
            {
                {
                    e, e, e,
                    e, e, e,
                    n, e, e,
                },
                {
                    e, e, e,
                    e, e, e,
                    e, e, e,
                },
                {
                    e, e, s,
                    e, s, s,
                    s, s, s,
                },
                {
                    n, n, e,
                    n, n, n,
                    n, n, n,
                },
                {
                    e, e, s,
                    e, p, s,
                    n, w, w,
                },
                {
                    s, s, s,
                    s, s, s,
                    s, s, s,
                },
                {
                    n, n, n,
                    n, n, w,
                    n, w, w,
                },
                {
                    w, w, w,
                    w, w, w,
                    w, w, w,
                },
                {
                    w, s, s,
                    w, w, s,
                    w, w, w,
                },
            }  // clang-format on
        );
    }


    template<typename MaterialElement>
    auto filled(MaterialElement const v) -> PartitionedArray<MaterialElement, 2>
    {
        return create_partitioned_array<PartitionedArray<MaterialElement, 2>>(
            array_shape,
            partition_shape,
            {
                {
                    // 0, 0
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                },
                {
                    // 0, 1
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                },
                {
                    // 0, 2
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                },
                {
                    // 1, 0
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                },
                {
                    // 1, 1
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                },
                {
                    // 1, 2
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                },
                {
                    // 2, 0
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                },
                {
                    // 2, 1
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                },
                {
                    // 2, 2
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                    v,
                },
            });
    }
    {% endraw %}

    {% for Element in UnsignedIntegralElements + FloatingPointElements %}
        template PartitionedArray<{{ Element }}, 2> filled({{ Element }});
    {% endfor %}

}  // namespace lue::test
