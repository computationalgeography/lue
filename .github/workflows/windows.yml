name: Windows CI

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - ".github/actions/**"
      - ".github/workflows/windows.yml"
      - "conanfile.py"
      - "CMakePresets.json"
      - "CMakeHPXPresets.json"
      - "environment/cmake/**"
      - "environment/script/write_conan_profile.py"
      - "source/**"
      - "!source/qa/python/qa/**"

jobs:
    build:

        strategy:
            matrix:
                os: ["windows-2022"]
                compiler:
                  - { name: "visual studio", c: cl, cxx: cl }
                vs:
                  - { name: "Visual Studio Enterprise 2022", version: "17", msvc_toolset: "14" }
                python_version: ["3.9"]
                architecture: ["amd64"]
            fail-fast: false

        runs-on: ${{ matrix.os }}

        name: ${{ matrix.os }} / ${{ matrix.vs.name }} / python - ${{ matrix.python_version }}

        timeout-minutes: 240

        defaults:
          run:
            shell: bash -l {0}
            working-directory: .

        env:
          lue_source_directory: lue_source
          lue_build_directory: lue_build
          lue_runtime_install_directory: lue_runtime_install
          lue_development_install_directory: lue_development_install
          lue_consume_source_directory: lue_consume_source
          lue_consume_build_directory: lue_consume_build
          hpx_version: 1.10.0
          hpx_branch: v1.10.0
          hpx_source_directory: hpx_source
          hpx_build_directory: hpx_build
          hpx_install_directory: hpx_install
          mdspan_tag: 9ceface91483775a6c74d06ebf717bbb2768452f  # 0.6.0
          mdspan_source_directory: mdspan_source
          mdspan_build_directory: mdspan_build
          mdspan_install_directory: mdspan_install

        steps:

        - uses: actions/checkout@v4
          with:
            path: ${{ env.lue_source_directory }}

        - uses: conda-incubator/setup-miniconda@v3
          with:
            miniforge-version: latest
            auto-update-conda: true
            conda-solver: "libmamba"
            python-version: ${{ matrix.python_version }}

        - name: setup platform
          run: |

              # Don't install C++ libraries with Conda. Use Conan for that. The Conan compiler
              # settings are used when building LUE. Mixing Conda/Conan packages likely results
              # in conflicts. Make an exception for numpy. Use Conda only for Python packages.
              # conda-build provides the conda-develop command used below
              # TODO Use the GDAL Conan package instead of the Conda package, once the GDAL
              #      Conan package actually works

              conda install \
                  libboost-devel \
                  conan \
                  conda-build \
                  docopt \
                  libgdal \
                  hdf5 \
                  jinja2 \
                  libhwloc \
                  matplotlib \
                  mimalloc \
                  ninja \
                  numpy \
                  ruamel.yaml

        - uses: ilammy/msvc-dev-cmd@v1
          with:
              arch: ${{ matrix.architecture }}
              toolset: ${{ matrix.vs.msvc_toolset }}

        - name: "install hpx"
          uses: ./lue_source/.github/actions/install_hpx
          with:
            cache_key: ${{ matrix.os }}_${{ matrix.compiler.cxx }}-${{ matrix.vs.msvc_toolset }}_python-${{ matrix.python_version }}_hpx-${{ env.hpx_version }}
            c_compiler: ${{ matrix.compiler.c }}
            cxx_compiler: ${{ matrix.compiler.cxx }}
            build_type: Release
            cmake_preset: hpx_release_windows_node_configuration
            cmake_preset_file: ${{ env.lue_source_directory }}/CMakeHPXPresets.json
            # Passing path for Hwloc_ROOT to prevent:
            #     HPXConfig.cmake:160 (set):
            #     Syntax error in cmake code at
            #       D:/a/lue/lue/hpx_install/lib/cmake/HPX/HPXConfig.cmake:160
            #     when parsing string
            #       C:\Users\runneradmin\miniconda3\envs\test/Library
            #     Invalid character escape '\U'.
            # HPX install logic needs to be updated, similar to how Boost_ROOT is handled
            cmake_flags: "-D CMAKE_POLICY_DEFAULT_CMP0167=OLD -D CMAKE_POLICY_DEFAULT_CMP0169=OLD -D Boost_ROOT=$CONDA_PREFIX/Library -D Hwloc_ROOT=C:/Users/runneradmin/miniconda3/envs/test/Library -D Hwloc_LIBRARY=$CONDA_PREFIX/Library/lib/hwloc.lib"
            hpx_branch: ${{ env.hpx_branch }}
            source_directory: ${{ env.hpx_source_directory }}
            build_directory: ${{ env.hpx_build_directory }}
            install_directory: ${{ env.hpx_install_directory }}

        - name: "install mdspan"
          uses: ./lue_source/.github/actions/install_mdspan
          with:
            cxx_compiler: ${{ matrix.compiler.cxx }}
            build_type: Release
            mdspan_tag: ${{ env.mdspan_tag }}
            source_directory: ${{ env.mdspan_source_directory }}
            build_directory: ${{ env.mdspan_build_directory }}
            install_directory: ${{ env.mdspan_install_directory }}

        - name: configure
          run: |
              # TODO Use the GDAL Conan package instead of the Conda package, once the GDAL
              #      Conan package actually works
              #      boost gdal hdf5 hwloc mimalloc
              mkdir ${{ env.lue_build_directory }}

              python ${{ env.lue_source_directory }}/environment/script/write_conan_profile.py \
                  ${{ matrix.compiler.cxx }} \
                  ${{ env.lue_source_directory }}/host_profile
              python ${{ env.lue_source_directory }}/environment/script/write_conan_profile.py \
                  ${{ matrix.compiler.cxx }} \
                  ${{ env.lue_source_directory }}/build_profile

              LUE_CONAN_PACKAGES="glfw imgui vulkan-headers vulkan-loader" \
                  conan install ${{ env.lue_source_directory }} \
                      --profile:host=${{ env.lue_source_directory }}/host_profile \
                      --profile:build=${{ env.lue_source_directory }}/build_profile \
                      --build=missing \
                      --output-folder=${{ env.lue_build_directory }}

              CMAKE_PREFIX_PATH=${{ env.lue_build_directory }} \
                  cmake \
                      -S ${{ env.lue_source_directory }} \
                      -B ${{ env.lue_build_directory }} \
                      --preset conan-release \
                      -D CMAKE_POLICY_DEFAULT_CMP0167=OLD \
                      -D CMAKE_POLICY_DEFAULT_CMP0169=OLD \
                      -D LUE_BUILD_QA=TRUE \
                      -D LUE_QA_WITH_PYTHON_API=TRUE \
                      -D LUE_QA_WITH_TESTS=TRUE \
                      -D LUE_QA_TEST_NR_LOCALITIES_PER_TEST=1 \
                      -D LUE_QA_TEST_NR_THREADS_PER_LOCALITY=2 \
                      -D LUE_DATA_MODEL_WITH_PYTHON_API=TRUE \
                      -D LUE_DATA_MODEL_WITH_UTILITIES=TRUE \
                      -D LUE_FRAMEWORK_WITH_IMAGE_LAND=TRUE \
                      -D LUE_FRAMEWORK_WITH_PYTHON_API=TRUE \
                      -D mdspan_ROOT=${{ env.mdspan_install_directory }} \
                      -D HPX_ROOT=${{ env.hpx_install_directory }} \
                      -D Hwloc_ROOT=$CONDA_PREFIX/Library \
                      -D Hwloc_LIBRARY=$CONDA_PREFIX/Library/lib/hwloc.lib

        - name: build
          run: |
              cmake --build ${{ env.lue_build_directory }} --target all

        - name: install
          run: |
              cmake \
                  --install ${{ env.lue_build_directory }} \
                  --prefix ${{ env.lue_runtime_install_directory }} \
                  --component lue_runtime \
                  --strip
              cmake \
                  --install ${{ env.lue_build_directory }} \
                  --prefix ${{ env.lue_development_install_directory }} \
                  --component lue_development \
                  --strip

        - name: test
          run: |
              # Unit tests
              ctest \
                  --test-dir ${{ env.lue_build_directory }} \
                  --output-on-failure \
                  --exclude-regex lue_py_image_land_python_test

              # Tests of runtime targets
              # Add location of dependencies installed with Conan to the runtime environment
              # Not needed yet.
              # ${{ env.lue_build_directory }}/conanrun.bat

              ${{ env.lue_runtime_install_directory }}/bin/lue_translate --version
              ${{ env.lue_runtime_install_directory }}/bin/lue_validate --version
              # This doesn't work due to missing Vulkan runtime
              # ${{ env.lue_runtime_install_directory }}/bin/lue_view --version

              # Add our package to the set of Conda packages
              conda-develop ${{ env.lue_runtime_install_directory }}/lib/python${{ matrix.python_version }}

              # NOTE: On Windows, locations in PATH are not used anymore by Python to lookup
              #       dlls. Locations must be added using os.add_dll_directory(path)
              #       We have added a slight hack to LUE's __init__.py to detect HPX' dll
              #       directory in PATH. Otherwise HPX won't be found. See comment in that file.
              #       Only needed on dev machines with custom HPX build, like we have here.
              export PATH="`pwd`/${{ env.hpx_install_directory }}/bin:$PATH"

              ${{ env.lue_runtime_install_directory }}/bin/lue_calculate.py --version
              ${{ env.lue_runtime_install_directory }}/bin/lue_scalability.py --version
              python -c "import lue, lue.data_model, lue.framework, lue.pcraster, lue.qa.scalability; print(lue.__version__)"

        - name: consume
          run: |
              # Test of imported CMake targets
              git clone https://github.com/computationalgeography/lue_consume.git ${{ env.lue_consume_source_directory }}

              cmake \
                  -S ${{ env.lue_consume_source_directory }} \
                  -B ${{ env.lue_consume_build_directory }} \
                  -G "Ninja" \
                  -D CMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
                  -D CMAKE_BUILD_TYPE=Release \
                  -D lue_ROOT=${{ env.lue_development_install_directory }} \
                  -D HPX_ROOT=${{ env.hpx_install_directory }} \
                  -D Hwloc_ROOT=$CONDA_PREFIX/Library \
                  -D Hwloc_LIBRARY=$CONDA_PREFIX/Library/lib/hwloc.lib \
                  -D mdspan_ROOT=${{ env.mdspan_install_directory }}
              cmake --build ${{ env.lue_consume_build_directory }} --target all

              export PATH="${{ env.lue_development_install_directory }}/bin:${{ env.hpx_install_directory }}/bin:$PATH"
              ${{ env.lue_consume_build_directory }}/lue_consume_data_model
              ${{ env.lue_consume_build_directory }}/lue_consume_framework
