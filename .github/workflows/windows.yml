name: Windows CI

on:
  push:
    branches-ignore:
      - "gh484"
    paths:
      - "conanfile.py"
      - ".github/workflows/windows.yml"
      - "environment/cmake/**"
      - "environment/script/write_conan_profile.py"
      - "source/**"
      - "!source/qa/python/qa/**"

jobs:
    build:

        strategy:
            matrix:
                os: ["windows-2022"]
                vs:
                  # - { name: "Visual Studio 16 2019", version: "16"}  # , toolset: "v142" }
                  - { name: "Visual Studio 17 2022", version: "17"}  # , toolset: "v143" }
                # toolset: ["14.2", "14.3"]
                python-version: ["3.9"]
                architecture: ["amd64"]
            fail-fast: true

        runs-on: ${{ matrix.os }}

        name: ${{ matrix.os }} / ${{ matrix.vs.name }} / python - ${{ matrix.python-version }}

        defaults:
          run:
            shell: bash -l {0}

        env:
          source-directory: $GITHUB_WORKSPACE
          build-directory: $GITHUB_WORKSPACE/../build
          install-directory: $GITHUB_WORKSPACE/../install

        steps:

        - uses: actions/checkout@v3

        - uses: conda-incubator/setup-miniconda@v2
          with:
              auto-update-conda: true
              python-version: ${{ matrix.python-version }}
              channels: conda-forge

        - name: install Conda packages
          run: |
              # Don't install C++ libraries with Conda. Use Conan for that. The Conan compiler
              # settings are used when building LUE. Mixing Conda/Conan packages likely results
              # in conflicts. Make an exception for numpy. Use Conda only for Python packages.
              # conda-build provides the conda-develop command used below
              # TODO Use the GDAL Conan package instead of the Conda package, once the GDAL
              #      Conan package actually works

              # Use different solver than the default to work around "picosat: out of memory in 'new'"
              conda install conda-libmamba-solver

              conda install --solver=libmamba \
                  boost-cpp \
                  conda-build \
                  docopt \
                  gdal \
                  jinja2 \
                  libhwloc \
                  matplotlib \
                  mimalloc \
                  ninja \
                  numpy \
                  pip \
                  ruamel.yaml

              # Use conan from pypi to get the latest version
              pip install "conan>=2"

        - uses: ilammy/msvc-dev-cmd@v1
          with:
              arch: ${{ matrix.architecture }}
              # toolset: ${{ matrix.toolset }}
              vsversion: ${{ matrix.vs.version }}

        - name: configure
          run: |
              python environment/script/write_conan_profile.py cl host_profile
              python environment/script/write_conan_profile.py cl build_profile
              # TODO Use the GDAL Conan package instead of the Conda package, once the GDAL
              #      Conan package actually works
              #      boost gdal hdf5 hwloc mimalloc
              mkdir ${{ env.build-directory }}
              LUE_CONAN_PACKAGES="docopt.cpp fmt glfw imgui nlohmann_json pybind11 vulkan-headers vulkan-loader" conan install . \
                  --profile:host=host_profile \
                  --profile:build=build_profile \
                  --build=missing \
                  --output-folder=${{ env.build-directory }}
              CMAKE_PREFIX_PATH=${{ env.build-directory }} \
                  cmake --preset conan-release \
                      -B ${{ env.build-directory }} \
                      -D LUE_BUILD_QA=TRUE \
                      -D LUE_QA_WITH_PYTHON_API=TRUE \
                      -D LUE_QA_WITH_TESTS=TRUE \
                      -D LUE_QA_TEST_NR_LOCALITIES_PER_TEST=1 \
                      -D LUE_QA_TEST_NR_THREADS_PER_LOCALITY=2 \
                      -D LUE_DATA_MODEL_WITH_PYTHON_API=TRUE \
                      -D LUE_DATA_MODEL_WITH_UTILITIES=TRUE \
                      -D LUE_FRAMEWORK_WITH_PYTHON_API=TRUE \
                      -D LUE_BUILD_HPX=TRUE \
                      -D HPX_USE_CMAKE_CXX_STANDARD=TRUE \
                      -D HPX_WITH_MALLOC="mimalloc" \
                      -D HPX_WITH_FETCH_ASIO=TRUE \
                      -D HWLOC_ROOT="$CONDA_PREFIX/Library" \
                      -D HWLOC_LIBRARY="$CONDA_PREFIX/Library/lib/hwloc.lib" \
                      -D HPX_WITH_PKGCONFIG=FALSE \
                      -D HPX_WITH_EXAMPLES=FALSE \
                      -D HPX_WITH_TESTS=FALSE

        - name: build
          run: |
              cmake --build ${{ env.build-directory }} --target all

        - name: test
          run: |
              ctest --test-dir ${{ env.build-directory }} --output-on-failure

        - name: install
          run: |
              cmake --install ${{ env.build-directory }} --prefix ${{ env.install-directory }} --component runtime
              cmake --install ${{ env.build-directory }} --prefix ${{ env.install-directory }} --component lue_runtime

              # Add location of dependencies installed with Conan to the runtime environment
              ${{ env.build-directory }}/conanrun.bat

              export PATH="`pwd`/${{ env.install-directory }}/bin:$PATH"
              ${{ env.install-directory }}/bin/lue_translate --version
              ${{ env.install-directory }}/bin/lue_validate --version
              ${{ env.install-directory }}/bin/lue_view --version || echo "TODO: Error executing lue_view!"

              # Add our package to the set of Conda packages
              conda-develop ${{ env.install-directory }}/lib/python${{ matrix.python-version }}
              ${{ env.install-directory }}/bin/lue_calculate --version || echo "TODO: Error executing lue_calculate!"
              ${{ env.install-directory }}/bin/lue_scalability --version || echo "TODO: Error executing lue_scalability!"
              python -c "import lue, lue.data_model, lue.framework, lue.pcraster, lue.qa.scalability; print(lue.__version__)"

              dumpbin //imports ${{ env.install-directory }}/bin/lue_view.exe
