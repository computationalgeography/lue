name: Linux CI

on:
  push:
    branches-ignore:
      - gh242
    paths:
      - ".github/workflows/linux.yml"
      - "source/**"

jobs:
    build:

        strategy:
            matrix:
                os: ["ubuntu-20.04"]
                python-version: [3.9]
                compiler:
                    # TODO Bump gcc to 11 (or later). We may have to switch to ubuntu-22.04 for that.
                    # To be recognized by Conan, name must be one of:
                    #     'Visual Studio', 'apple-clang', 'clang', 'gcc', 'intel', 'intel-cc', 'mcst-lcc',
                    #     'msvc', 'qcc', 'sun-cc'
                    - { name: gcc  , version:  9, cc: gcc-9   , cxx: g++-9      }
                    - { name: gcc  , version: 10, cc: gcc-10  , cxx: g++-10     }
                    - { name: clang, version: 11, cc: clang-11, cxx: clang++-11 }
                    - { name: clang, version: 12, cc: clang-12, cxx: clang++-12 }
            fail-fast: false

        runs-on: ${{ matrix.os }}

        name: ${{ matrix.os }} / ${{ matrix.compiler.cxx }} / python - ${{ matrix.python-version }}

        steps:

        - name: checkout lue
          uses: actions/checkout@v2

        - name: configure system
          run: |
              sudo apt update
              sudo apt install \
                  cmake \
                  doxygen \
                  graphviz \
                  hwloc \
                  lftp \
                  libboost-all-dev \
                  libdocopt-dev \
                  libfmt-dev \
                  libglfw3-dev \
                  libgdal-dev \
                  libgoogle-perftools-dev \
                  libhdf5-dev \
                  ${{ matrix.compiler.cc }} \
                  ninja-build
        - uses: conda-incubator/setup-miniconda@v2
          with:
              auto-update-conda: true
              python-version: ${{ matrix.python-version }}
              channels: conda-forge
        - shell: bash -l {0}
          run: |
              # Pin markupsafe, used by Jinja which is used by Conan, because of a breaking
              # change in markupsafe 2.1.0
              conda install docopt "markupsafe<2.1.0" numpy pip
              # breathe sphinx

              # Use conan from pypi to get the latest version
              pip install conan

              conan profile new --detect default
              conan profile update settings.compiler=${{ matrix.compiler.name }} default
              conan profile update settings.compiler.version=${{ matrix.compiler.version }} default
              conan profile update settings.compiler.libcxx=libstdc++11 default

              # Install packages, allowing any required system packages to be installed as well
              conan profile update conf.tools.system.package_manager:mode=install default
              conan profile update conf.tools.system.package_manager:sudo=True default
              CONAN_SYSREQUIRES_MODE=enabled conan install xorg/system@
              CONAN_SYSREQUIRES_MODE=enabled conan install opengl/system@
              CONAN_SYSREQUIRES_MODE=enabled conan install glu/system@

        - name: configure lue
          shell: bash -l {0}
          run: |
              mkdir $GITHUB_WORKSPACE/../build
              cmake \
                  -S . \
                  -B $GITHUB_WORKSPACE/../build \
                  -G "Ninja" \
                  -D CMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
                  -D CMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
                  -D CMAKE_BUILD_TYPE=Release \
                  -D FETCHCONTENT_QUIET=FALSE \
                  -D LUE_BUILD_DOCUMENTATION=FALSE \
                  -D LUE_BUILD_TEST=TRUE \
                  -D LUE_TEST_NR_LOCALITIES_PER_TEST=1 \
                  -D LUE_TEST_NR_THREADS_PER_LOCALITY=2 \
                  -D LUE_BUILD_DATA_MODEL=TRUE \
                  -D LUE_DATA_MODEL_WITH_PYTHON_API=TRUE \
                  -D LUE_DATA_MODEL_WITH_UTILITIES=TRUE \
                  -D LUE_BUILD_FRAMEWORK=TRUE \
                  -D LUE_FRAMEWORK_WITH_PYTHON_API=TRUE \
                  -D LUE_BUILD_HPX=TRUE \
                  -D LUE_BUILD_VIEW=TRUE \
                  -D HPX_USE_CMAKE_CXX_STANDARD=TRUE \
                  -D HPX_WITH_MALLOC="tcmalloc" \
                  -D HPX_WITH_FETCH_ASIO=TRUE \
                  -D HPX_WITH_PKGCONFIG=FALSE \
                  -D HPX_WITH_EXAMPLES=FALSE \
                  -D HPX_WITH_TESTS=FALSE

        - name: build lue
          shell: bash -l {0}
          run: |
              # For now, don't use both cores. One of the CI builds runs out of memory.
              cmake --build $GITHUB_WORKSPACE/../build --target all --parallel 1

        - name: test lue
          shell: bash -l {0}
          run: |
              cd $GITHUB_WORKSPACE/../build
              ctest --output-on-failure

        # - name: generate lue documentation
        #   shell: bash
        #   run: |
        #       cmake --build $GITHUB_WORKSPACE/../build --target cpp_doc py_doc
        #       cmake --build $GITHUB_WORKSPACE/../build --target sphinx_doc

        - name: install lue_runtime component
          shell: bash -l {0}
          run: |
              cmake --install $GITHUB_WORKSPACE/../build --prefix install --component hpx_runtime
              cmake --install $GITHUB_WORKSPACE/../build --prefix install --component lue_runtime

              install/bin/lue_translate --version
              install/bin/lue_validate --version
              install/bin/lue_view --version

              export PYTHONPATH="install/lib/python${{ matrix.python-version }}:$PYTHONPATH"
              python -c "import lue; print(lue.__version__)"

        - name: deploy lue documentation
          if: github.ref == 'refs/heads/master' && matrix.compiler.cxx == 'g++-9' && matrix.python-version == 3.9
          env:
              ftp_server: ${{ secrets.FTP_SERVER }}
              ftp_port: ${{ secrets.FTP_PORT }}
              ftp_username: ${{ secrets.FTP_USERNAME }}
              ftp_password: ${{ secrets.FTP_PASSWORD }}
              remote_dir: ${{ secrets.FTP_REMOTE_DIR }}
              local_dir: "sphinx/"
          run: |
              # TODO cd $GITHUB_WORKSPACE/../build/document/doc
              mkdir -p $HOME/.ssh
              # TODO
              type ssh-keyscan  # If not present, install openssh-client above first
              # ssh-keyscan $ftp_server >> $HOME/.ssh/known_hosts || true
              # lftp -c "open --user $ftp_username --password $ftp_password -p $ftp_port sftp://$ftp_server; set sftp:auto-confirm yes; mirror --verbose --reverse --delete --continue --parallel=2 $local_dir $remote_dir/doc"
